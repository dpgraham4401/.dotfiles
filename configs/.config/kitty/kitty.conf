# vim:fileencoding=utf-8:ft=conf:foldmethod=marker

# Fonts {{{

font_family      SourceCodePro-Regular
bold_font        auto
italic_font      auto
bold_italic_font auto

font_size        14.0

# }}}

#: Mouse {{{

# mouse_hide_wait 3.0

#: Hide mouse cursor after the specified number of seconds of the
#: mouse not being used. Set to zero to disable mouse cursor hiding.
#: Set to a negative value to hide the mouse cursor immediately when
#: typing text. Disabled by default on macOS as getting it to work
#: robustly with the ever-changing sea of bugs that is Cocoa is too
#: much effort.

# url_color #0087bd
# url_style curly
# https://hello.com

#: The color and style for highlighting URLs on mouse-over. url_style
#: can be one of: none, straight, double, curly, dotted, dashed

# open_url_with default

#: The program with which to open URLs that are clicked on. The
#: special value default means to use the operating system's default
#: URL handler (open on macOS and xdg-open on Linux).

# url_prefixes file ftp ftps gemini git gopher http https irc ircs kitty mailto news sftp ssh

#: The set of URL prefixes to look for when detecting a URL under the
#: mouse cursor.

# detect_urls yes

#: Detect URLs under the mouse. Detected URLs are highlighted with an
#: underline and the mouse cursor becomes a hand over them. Even if
#: this option is disabled, URLs are still clickable.

# url_excluded_characters

#: Additional characters to be disallowed from URLs, when detecting
#: URLs under the mouse cursor. By default, all characters legal in
#: URLs are allowed.

copy_on_select yes

#: Copy to clipboard or a private buffer on select. With this set to
#: clipboard, simply selecting text with the mouse will cause the text
#: to be copied to clipboard. Useful on platforms such as macOS that
#: do not have the concept of primary selections. You can instead
#: specify a name such as a1 to copy to a private kitty buffer
#: instead. Map a shortcut with the paste_from_buffer action to paste
#: from this private buffer. For example::

#:     map shift+cmd+v paste_from_buffer a1

#: Note that copying to the clipboard is a security risk, as all
#: programs, including websites open in your browser can read the
#: contents of the system clipboard.

# paste_actions quote-urls-at-prompt

#: A comma separated list of actions to take when pasting text into
#: the terminal. Possibilities are:

#: quote-urls-at-prompt:
#:     If the text being pasted is a URL and the cursor is at a shell prompt,
#:     automatically quote the URL (needs https://sw.kovidgoyal.net/kitty/shell-integration/).
#: confirm:
#:     Confirm the paste if bracketed paste mode is not active or there is more
#:     a large amount of text being pasted.
#: filter:
#:     Run the filter_paste() function from the file paste-actions.py in
#:     the kitty config directory on the pasted text. The text returned by the
#:     function will be actually pasted.

strip_trailing_spaces always

#: Remove spaces at the end of lines when copying to clipboard. A
#: value of smart will do it when using normal selections, but not
#: rectangle selections. always will always do it.

# select_by_word_characters @-./_~?&=%+#

#: Characters considered part of a word when double clicking. In
#: addition to these characters any character that is marked as an
#: alphanumeric character in the unicode database will be matched.

# click_interval -1.0

#: The interval between successive clicks to detect double/triple
#: clicks (in seconds). Negative numbers will use the system default
#: instead, if available, or fallback to 0.5.

# focus_follows_mouse no

#: Set the active window to the window under the mouse when moving the
#: mouse around

# pointer_shape_when_grabbed arrow

#: The shape of the mouse pointer when the program running in the
#: terminal grabs the mouse. Valid values are: arrow, beam and hand

# default_pointer_shape beam

#: The default shape of the mouse pointer. Valid values are: arrow,
#: beam and hand

# pointer_shape_when_dragging beam

#: The default shape of the mouse pointer when dragging across text.
#: Valid values are: arrow, beam and hand

#: Mouse actions {{{

#: Mouse buttons can be remapped to perform arbitrary actions. The
#: syntax for doing so is:

#: .. code-block:: none

#:     mouse_map button-name event-type modes action

#: Where ``button-name`` is one of ``left``, ``middle``, ``right`` or
#: ``b1 ... b8`` with added keyboard modifiers, for example:
#: ``ctrl+shift+left`` refers to holding the ctrl+shift keys while
#: clicking with the left mouse button. The number ``b1 ... b8`` can
#: be used to refer to upto eight buttons on a mouse.

#: ``event-type`` is one ``press``, ``release``, ``doublepress``,
#: ``triplepress``, ``click`` and ``doubleclick``.  ``modes``
#: indicates whether the action is performed when the mouse is grabbed
#: by the program running in the terminal, or not. It can have one or
#: more or the values, ``grabbed,ungrabbed``. ``grabbed`` refers to
#: when the program running in the terminal has requested mouse
#: events. Note that the click and double click events have a delay of
#: click_interval to disambiguate from double and triple presses.

#: You can run kitty with the kitty --debug-input command line option
#: to see mouse events. See the builtin actions below to get a sense
#: of what is possible.

#: If you want to unmap an action map it to ``no-op``. For example, to
#: disable opening of URLs with a plain click::

#:     mouse_map left click ungrabbed no-op

#: .. note::
#:     Once a selection is started, releasing the button that started it will
#:     automatically end it and no release event will be dispatched.

# clear_all_mouse_actions no

#: You can have kitty remove all mouse actions seen up to this point.
#: Useful, for instance, to remove the default mouse actions.

#: Click the link under the mouse or move the cursor

# mouse_map left click ungrabbed mouse_handle_click selection link prompt

#::  First check for a selection and if one exists do nothing. Then
#::  check for a link under the mouse cursor and if one exists, click
#::  it. Finally check if the click happened at the current shell
#::  prompt and if so, move the cursor to the click location. Note
#::  that this requires shell-integration to work.

#: Click the link under the mouse or move the cursor even when grabbed

# mouse_map shift+left click grabbed,ungrabbed mouse_handle_click selection link prompt

#::  Same as above, except that the action is performed even when the
#::  mouse is grabbed by the program running in the terminal.

#: Click the link under the mouse cursor

# mouse_map ctrl+shift+left release grabbed,ungrabbed mouse_handle_click link

#::  Variant with ctrl+shift is present because the simple click based
#::  version has an unavoidable delay of click_interval, to
#::  disambiguate clicks from double clicks.

#: Discard press event for link click

# mouse_map ctrl+shift+left press grabbed discard_event

#::  Prevent this press event from being sent to the program that has
#::  grabbed the mouse, as the corresponding release event is used to
#::  open a URL.

#: Paste from the primary selection

# mouse_map middle release ungrabbed paste_from_selection

#: Start selecting text

# mouse_map left press ungrabbed mouse_selection normal

#: Start selecting text in a rectangle

# mouse_map ctrl+alt+left press ungrabbed mouse_selection rectangle

#: Select a word

# mouse_map left doublepress ungrabbed mouse_selection word

#: Select a line

# mouse_map left triplepress ungrabbed mouse_selection line

#::  Select the entire line

#: Select line from point

# mouse_map ctrl+alt+left triplepress ungrabbed mouse_selection line_from_point

#::  Select from the clicked point to the end of the line

#: Extend the current selection

# mouse_map right press ungrabbed mouse_selection extend

#::  If you want only the end of the selection to be moved instead of
#::  the nearest boundary, use move-end instead of extend.

#: Paste from the primary selection even when grabbed

# mouse_map shift+middle release ungrabbed,grabbed paste_selection
# mouse_map shift+middle press grabbed discard_event

#: Start selecting text even when grabbed

# mouse_map shift+left press ungrabbed,grabbed mouse_selection normal

#: Start selecting text in a rectangle even when grabbed

# mouse_map ctrl+shift+alt+left press ungrabbed,grabbed mouse_selection rectangle

#: Select a word even when grabbed

# mouse_map shift+left doublepress ungrabbed,grabbed mouse_selection word

#: Select a line even when grabbed

# mouse_map shift+left triplepress ungrabbed,grabbed mouse_selection line

#::  Select the entire line

#: Select line from point even when grabbed

# mouse_map ctrl+shift+alt+left triplepress ungrabbed,grabbed mouse_selection line_from_point

#::  Select from the clicked point to the end of the line

#: Extend the current selection even when grabbed

# mouse_map shift+right press ungrabbed,grabbed mouse_selection extend

#: Show clicked command output in pager

# mouse_map ctrl+shift+right press ungrabbed mouse_show_command_output

#::  Requires https://sw.kovidgoyal.net/kitty/shell-integration/ to
#::  work

#: }}}

#: }}}

# keymapping {{{

map ctrl+shift+w no_op
map ctrl+shift+q no_op

# }}}

# Cursor {{{

cursor #0099ff
cursor_shape block
#cursor_beam_thickness 3

# }}}

# Scrollback {{{

scrollback_lines 1000

# }}}

# Mouse {{{

mouse_hide_wait 3.0
url_color #6699ff
url_style curly
#open_url_modifier 
kitty_mod ctrl+shift
open_url_with default
url_prefixes htp https file ftp

copy_on_select clipboard
strip_trailing_spaces smart

#terminal_select_modifier shift
touch_scroll_multiplier 3.0


# }}}

# Color Scheme {{{


# Fedora 
foreground #ffffff
background #050a14
background_opacity 0.95
selection_background #e6ecff
color0 #000000
color1 #767676
color2 #2e5cb8
color3 #7094db
color4 #0073e6
color5 #0099ff
color6 #66b3ff
color7 #bccdd1
color8 #a9a9a9 
color9 #767676
color10 #2e5cb8
color11 #7094db
color12 #0073e6
color13 #0099ff
color14 #66b3ff
color15 #cedff3

# Arch
# background            #000000
# foreground            #f2f2f2
# cursor                #4d4d4d
# selection_background  #414141
# color0                #000000
# color1                #224444
# color2                #446666
# color3                #668888
# color4                #224499
# color5                #2277bb
# color6                #4499bb
# color7                #666666
# color8                #bfbfbf
# color9                #446666
# color10               #668888
# color11               #88aaaa
# color12               #3355aa
# color13               #3399cc
# color14               #55aacc
# color15               #e5e5e5
# selection_foreground #000000
# }}}

# things added since I started checking kitty.conf into git
#: Performance tuning {{{

# repaint_delay 10

#: Delay (in milliseconds) between screen updates. Decreasing it,
#: increases frames-per-second (FPS) at the cost of more CPU usage.
#: The default value yields ~100 FPS which is more than sufficient for
#: most uses. Note that to actually achieve 100 FPS you have to either
#: set sync_to_monitor to no or use a monitor with a high refresh
#: rate. Also, to minimize latency when there is pending input to be
#: processed, repaint_delay is ignored.

# input_delay 3

#: Delay (in milliseconds) before input from the program running in
#: the terminal is processed. Note that decreasing it will increase
#: responsiveness, but also increase CPU usage and might cause flicker
#: in full screen programs that redraw the entire screen on each loop,
#: because kitty is so fast that partial screen updates will be drawn.

# sync_to_monitor yes

#: Sync screen updates to the refresh rate of the monitor. This
#: prevents tearing (https://en.wikipedia.org/wiki/Screen_tearing)
#: when scrolling. However, it limits the rendering speed to the
#: refresh rate of your monitor. With a very high speed mouse/high
#: keyboard repeat rate, you may notice some slight input latency. If
#: so, set this to no.

#: }}}

confirm_os_window_close 0
